package br.com.cauezito.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import br.com.cauezito.beans.UserBean;
import br.com.cauezito.jdbc.SingleConnection;

public class UserDao {

	private Connection connection;
	
	public UserDao() {
		connection =  SingleConnection.getConnection();
	}
	
	public boolean save(UserBean user) {
		try {
			String sql = "insert into users (login, password, name, last_name, gender, phone) values (?, ?, ?, ?, ?, ?)";
			PreparedStatement st = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			st.setString(1, user.getLogin());
			st.setString(2,  user.getPassword());
			st.setString(3,  user.getName());
			st.setString(4, user.getLastName());
			st.setString(5, user.getGender());
			st.setString(6, user.getPhone());
			st.execute();

			ResultSet rs = st.getGeneratedKeys();
			if (rs.next()) {
				user.setId(rs.getLong(1));
			}
			
			
			sql = "insert into adresses (zipCode, address, area, locality, federatedUnit, id_user) values (?, ?, ?, ?, ?, ?)";
			st = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
			st.setString(1, user.getAddress().getZipCode());
			st.setString(2, user.getAddress().getAddress());
			st.setString(3, user.getAddress().getArea());
			st.setString(4, user.getAddress().getLocality());
			st.setString(5, user.getAddress().getFederatedUnit());
			st.setInt(6, Integer.parseInt(user.getId().toString()));
			st.execute();
			
			rs = st.getGeneratedKeys();
			if(rs.next()) {
				user.getAddress().setId(rs.getInt(1));
			}
			
			connection.commit();
			
			
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}
		return false;
	}
	
	public boolean delete(Long id) {
		try {
			String sql = "delete from users where id = " + id;
			PreparedStatement ps = connection.prepareStatement(sql);
			ps.execute();	
			connection.commit();
			return true;
		}catch (SQLException e) {
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}
		
		return false;
	}
	
	public List<UserBean> findAll(){
		List<UserBean> list = new ArrayList<UserBean>();
		
		try {
			String sql = "Select * from users";
			PreparedStatement ps = connection.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			while(rs.next()) {
				UserBean user = new UserBean();
				user.setId(rs.getLong("id"));
				user.setLogin(rs.getString("login"));
				user.setPassword(rs.getString("password"));
				user.setName(rs.getString("name"));
				user.setLastName(rs.getString("last_name"));
				user.setGender(rs.getString("gender"));
				user.setPhone(rs.getString("phone"));
				list.add(user);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
				
		return list;
	}

	public UserBean findById(Long id) {
		try {
			String sql = "Select * from users where id = " + id;
			PreparedStatement ps = connection.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			while(rs.next()) {
				UserBean user = new UserBean();
				user.setId(rs.getLong("id"));
				user.setLogin(rs.getString("login"));
				user.setPassword(rs.getString("password"));
				user.setName(rs.getString("name"));
				user.setLastName(rs.getString("last_name"));
				user.setGender(rs.getString("gender"));
				user.setPhone(rs.getString("phone"));
				return user;
			}
		} catch (SQLException e) {
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}
		
		return null;
	}

	public boolean update(UserBean user) {		
		try {
			String sql = "update users set login = ?, password = ?, name = ?, last_name = ?, gender = ?, phone = ? "
					+ " where id = " + user.getId();
			PreparedStatement ps;
			ps = connection.prepareStatement(sql);
			ps.setString(1, user.getLogin());
			ps.setString(2, user.getPassword());
			ps.setString(3, user.getName());
			ps.setString(4, user.getLastName());
			ps.setString(5, user.getGender());
			ps.setString(6, user.getPhone());
			ps.executeUpdate();
			connection.commit();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
			try {
				connection.rollback();
			} catch (SQLException e1) {
				e1.printStackTrace();
			}
		}
		return false;		
	}
	
	public boolean validateNewUser(String login) {
		try {
			String sql = "select count(1) as qtd from users where login = '" + login + "'";
			PreparedStatement ps = connection.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			while(rs.next()) {
				return rs.getInt("qtd") <= 0 /*return true*/;
			}
			
		}catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
	
	public boolean validateUpdate(String login, Long id) {
		try {
			String sql = "select count(1) as qtd from users where login = '" + login + "'"
					+ " and id <> " + id;
			PreparedStatement ps = connection.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			while(rs.next()) {
				return rs.getInt("qtd") <= 0 /*return true*/;
			}
			
		}catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
}
